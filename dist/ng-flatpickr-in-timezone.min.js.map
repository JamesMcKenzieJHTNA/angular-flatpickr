{"version":3,"sources":["ng-flatpickr-in-timezone.min.js"],"names":["root","factory","angular","flatpickr","moment","this","require","Error","requireMoment","ngFlatpickrInTimezone","module","directive","$rootScope","$parse","restrict","link","scope","element","attrs","fpOpts","defaultDate","ngModel","formatDate","format","dateObj","chars","split","flatpickrFormats","Flatpickr","prototype","formats","dateString","map","c","i","join","timezone","utcMoment","dateFormat","utc","add","utcOffset","subtract","tz","altFormat","timezoneAbbr","flatPickr"],"mappings":"CAAC,SAASA,EAAMC,GACZ,YAcAD,GAAK,iCAAmCC,EAAQD,EAAKE,QAASF,EAAKG,UAAWH,EAAKI,SACrFC,KAAM,SAASH,EAASC,EAAWC,GACnC,YAEA,IAAqB,mBAAXA,GAAwB,CAChC,GAAsB,kBAAZE,SAGR,KAAM,IAAIC,OAAM,yBAFhBH,GAASI,gBAMb,GAAIC,GAAwBP,EAAQQ,OAAO,mCAkF3C,OAhFAD,GAAsBE,UAAU,cAAe,SAASC,EAAYC,GAChE,OACIC,SAAW,IACXC,KAAO,SAASC,EAAOC,EAASC,GAC5B,GAAIC,GAASN,EAAOK,EAAMC,QAAQH,EAClCG,GAAOC,YAAcP,EAAOK,EAAMG,SAASL,GAQ3CG,EAAOG,WAAa,SAASC,EAAQC,GACjC,GAAIC,GAAQF,EAAOG,MAAM,IACrBC,EAAmBC,UAAUC,UAAUC,QAGvCC,EAAaN,EAAMO,IAAI,SAASC,EAAGC,GACnC,MAAIP,GAAiBM,IAAuB,OAAjBR,EAAMS,EAAI,GAC1BP,EAAiBM,GAAGT,GAEd,OAANS,EAAaA,EAAI,KAE7BE,KAAK,GAIR,IAAIhB,EAAOiB,SAAU,CACjB,GACIC,GADAD,EAAWjB,EAAOiB,UAAY,KAElC,IAAIb,IAAWJ,EAAOmB,WAgBlB,MAbAD,GAAYjC,EAAOmC,IAAIf,GAINgB,IAAIpC,IAASqC,YAAa,WAO3CJ,EAAYA,EAAUK,SAASL,EAAUM,GAAGP,GAAUK,YAAa,WAE5DJ,EAAUd,QAEd,IAAIA,IAAWJ,EAAOyB,UAAW,CAGpCP,EAAYjC,EAAOmC,IAAIf,GAENgB,IAAIpC,IAASqC,YAAa,UAE3C,IAAII,GAAeR,EAEFK,SAASL,EAAUM,GAAGP,GAAUK,YAAa,WAE7CE,GAAGP,GAIHb,OAAO,IAExB,OAAOQ,GAAa,IAAMc,EAE1B,MAAOd,GAGf,MAAOA,GAGX,IAAIe,GAAY,GAAIlB,WAAUX,EAAQ,GAAIE,EAC1C,OAAO2B,OAKZrC","file":"ng-flatpickr-in-timezone.min.js","sourcesContent":["(function(root, factory) {\n    'use strict';\n\n    function isUndefinedOrNull(val) {\n      return angular.isUndefined(val) || val === null;\n    }\n\n    function requireMoment() {\n      try {\n        return require('moment-timezone');\n      } catch (e) {\n        throw new Error('Please install moment and moment-timezome and require/import them into your angular project');\n      }\n    }\n    \n    root['angular-flatpickr-in-timezone'] = factory(root.angular, root.flatpickr, root.moment);\n}(this, function(angular, flatpickr, moment) {\n  'use strict';\n\n  if(typeof moment === 'undefined') {\n    if(typeof require === 'function') {\n      moment = requireMoment();\n    }else{\n      throw new Error('Moment cannot be found');\n    }\n  }\n  \n  var ngFlatpickrInTimezone = angular.module('angular-flatpickr-in-timezone', []);\n\n  ngFlatpickrInTimezone.directive('ngFlatpickr', function($rootScope, $parse, $q) {\n      return {\n          restrict : 'A',\n          link : function(scope, element, attrs) {\n              var fpOpts = $parse(attrs.fpOpts)(scope);\n              fpOpts.defaultDate = $parse(attrs.ngModel)(scope);\n\n              /**\n               * Date Formatting\n               * @param  {String} format - pattern with which to format the date as a string (https://chmln.github.io/flatpickr/formatting/)\n               * @param {Date} dateObj - a javascript Date object\n               * @returns {String}\n              */\n              fpOpts.formatDate = function(format, dateObj) {\n                  var chars = format.split('');\n                  var flatpickrFormats = Flatpickr.prototype.formats;\n\n                  // Adapted from flatpickr source\n                  var dateString = chars.map(function(c, i) {\n                      if (flatpickrFormats[c] && chars[i - 1] !== '\\\\') {\n                          return flatpickrFormats[c](dateObj);\n                      } else {\n                          return c !== '\\\\' ? c : '';\n                      }\n                  }).join('');\n\n                  // Custom functionality to support designated timezones\n                  // input/model value returns UTC value of a date-time selected in the designated timezone\n                  if (fpOpts.timezone) {\n                      var timezone = fpOpts.timezone || 'UTC';\n                      var utcMoment;\n                      if (format === fpOpts.dateFormat) {\n                          // If we are formatting the input/model value:\n                          // We ignore the dateString generated above and convert the dateObj to UTC time\n                          utcMoment = moment.utc(dateObj)\n                                          // The above conversion assumes dateObj is in the browser's timezone\n                                          // and will subtract the browser's utcOffset from the date-time.\n                                          // We reverse this by adding back the browser's utcOffset in minutes\n                                          .add(moment().utcOffset(), 'minutes');\n\n                          // We now have the selected date-time as if it were selected in UTC\n                          // What we actually want is the selected date-time as if it were selected in fpOpts.timezone\n                          // To simulate this, we subtract that timezone's utcOffset in minutes\n                          // And we return this adjusted UTC value\n                          // Later, if we were to display this UTC value in the relevant timezone, the subtracted minutes would be restored\n                          utcMoment = utcMoment.subtract(utcMoment.tz(timezone).utcOffset(), 'minutes');\n\n                          return utcMoment.format(); // e.g. \"2017-03-27T04:00:00.000Z\"\n\n                      } else if (format === fpOpts.altFormat) {\n                          // If we are formatting the input element's display value:\n                          // We'll keep the dateString as-is, then append the appropriate timezone abbreviation\n                          utcMoment = moment.utc(dateObj) // Convert the dateObj to UTC time\n                                          // Add the browser's utcOffset in minutes\n                                          .add(moment().utcOffset(), 'minutes');\n\n                          var timezoneAbbr = utcMoment\n                                          // Subtract facility timezone's utcOffset in minutes\n                                          .subtract(utcMoment.tz(timezone).utcOffset(), 'minutes')\n                                          // Convert to facility timezone, which adds back the minutes from above\n                                          .tz(timezone)\n                                          // Format simply as 'z' to get the timezone abbreviation\n                                          // Depending on the date-time resulting from the above adjustments,\n                                          // this abbreviation may or may not be the daylight savings time version of the timezone abbreviation\n                                          .format('z');\n\n                          return dateString + ' ' + timezoneAbbr;\n                      } else {\n                          return dateString;\n                      }\n                  }\n                  return dateString;\n              };\n\n              var flatPickr = new Flatpickr(element[0], fpOpts);\n              return flatPickr;\n          }\n      };\n  });\n\n  return ngFlatpickrInTimezone;\n\n}));"]}